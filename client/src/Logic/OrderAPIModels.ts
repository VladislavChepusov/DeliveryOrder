//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getOrders(): Promise<Order[]> {
        let url_ = this.baseUrl + "/api/Order/GetOrders";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrders(_response);
        });
    }

    protected processGetOrders(response: Response): Promise<Order[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Order.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Order[]>(null as any);
    }

    /**
     * @param iD (optional) 
     * @return Success
     */
    getOrderById(iD: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Order/GetOrderById?";
        if (iD === null)
            throw new Error("The parameter 'iD' cannot be null.");
        else if (iD !== undefined)
            url_ += "ID=" + encodeURIComponent("" + iD) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrderById(_response);
        });
    }

    protected processGetOrderById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addOrder(body: OrderModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Order/AddOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddOrder(_response);
        });
    }

    protected processAddOrder(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Order implements IOrder {
    id?: string;
    senderCity!: string;
    senderAddress!: string;
    receiverCity!: string;
    receiverAddress!: string;
    cargoWeight!: number;
    cargoPickupDate!: Date;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.senderCity = _data["senderCity"];
            this.senderAddress = _data["senderAddress"];
            this.receiverCity = _data["receiverCity"];
            this.receiverAddress = _data["receiverAddress"];
            this.cargoWeight = _data["cargoWeight"];
            this.cargoPickupDate = _data["cargoPickupDate"] ? new Date(_data["cargoPickupDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["senderCity"] = this.senderCity;
        data["senderAddress"] = this.senderAddress;
        data["receiverCity"] = this.receiverCity;
        data["receiverAddress"] = this.receiverAddress;
        data["cargoWeight"] = this.cargoWeight;
        data["cargoPickupDate"] = this.cargoPickupDate ? this.cargoPickupDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOrder {
    id?: string;
    senderCity: string;
    senderAddress: string;
    receiverCity: string;
    receiverAddress: string;
    cargoWeight: number;
    cargoPickupDate: Date;
}

export class OrderModel implements IOrderModel {
    senderCity!: string;
    senderAddress!: string;
    receiverCity!: string;
    receiverAddress!: string;
    cargoWeight!: number;
    cargoPickupDate!: Date;

    constructor(data?: IOrderModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.senderCity = _data["senderCity"];
            this.senderAddress = _data["senderAddress"];
            this.receiverCity = _data["receiverCity"];
            this.receiverAddress = _data["receiverAddress"];
            this.cargoWeight = _data["cargoWeight"];
            this.cargoPickupDate = _data["cargoPickupDate"] ? new Date(_data["cargoPickupDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderModel {
        data = typeof data === 'object' ? data : {};
        let result = new OrderModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["senderCity"] = this.senderCity;
        data["senderAddress"] = this.senderAddress;
        data["receiverCity"] = this.receiverCity;
        data["receiverAddress"] = this.receiverAddress;
        data["cargoWeight"] = this.cargoWeight;
        data["cargoPickupDate"] = this.cargoPickupDate ? this.cargoPickupDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOrderModel {
    senderCity: string;
    senderAddress: string;
    receiverCity: string;
    receiverAddress: string;
    cargoWeight: number;
    cargoPickupDate: Date;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}